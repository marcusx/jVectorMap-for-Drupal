<?php

define('MAP_CUSTOM', 0);
define('MAP_WORLD', 1);
define('MAP_US', 2);
define('MAP_EUROPE', 3);
define('MAP_GERMANY', 4);

/**
 * @file
 * Use jVectorMap with Drupal.
 */

/**
 * Implements hook_init().
 *
 */
function jvectormap_init() {

  // Since this file should only be loaded if a jvectormap is displayed, it cannot be
  // declared in the info file.

  //@todo: determine if a map is displayed on a page before we load the js.

  //Load the worldmap, jvectormap and the css.
  if ($path = libraries_get_path('jvectormap')) {
    //drupal_add_js($path . '/world-en.js');
    //drupal_add_js($path . '/jquery.vector-map.js');
    //drupal_add_css($path . '/jquery.vector-map.css');
  }
}

/*
 * Internal function for the included pre-made maps (World, etc.)
 */
function jvectormap_basic_map_info() {
  return array(
    MAP_WORLD => array(
      'file' => 'world-en.js',
      'config' => 'world_en',
    ),
    MAP_US => array(
      'file' =>	 'usa-en.js',
      'config' => 'usa_en',
    ),
    MAP_EUROPE => array(
      'file' =>	 'europe-en.js',
      'config' => 'europe_en',
    ),
    MAP_GERMANY => array(
      'file' =>	 'germany-en.js',
      'config' => 'germany_en',
    ),
  );
}

function jvectormap_add_resources($map) {
  if ($path = libraries_get_path('jvectormap')) {
    // Always add the main js and css files.
    drupal_add_js($path . '/jquery.vector-map.js', array('weight' => 1));
    drupal_add_css($path . '/jquery.vector-map.css');

    if ($map->map_area != MAP_CUSTOM) {
      // For non-custom maps (World, US, Europe, and Germany)
      $maps = jvectormap_basic_map_info();
      // Add the appropriate map file
      drupal_add_js($path . '/' . $maps[$map->map_area]['file'], array('weight' => 2));
      // Include the inline javascript that actually displays the map in the container
      $map_config = drupal_json_encode(
        array(
      	  'map' => $maps[$map->map_area]['config'],
      	  'backgroundColor' => $map->background_color,
      	  'color' => $map->foreground_color,
      	  'hoverColor' => $map->hover_color,
        )
      );
      $js = "jQuery('#{$map->container}').vectorMap($map_config);";
      drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer', 'weight' => 3));
    } else {
      //@todo: Implement stuff for custom maps
    }
  }
}

/**
 * Implementation of hook_ctools_plugin_api()
 */
function jvectormap_ctools_plugin_api($owner, $api) {
  if ($owner == 'jvectormap' && $api == 'default_jvectormap_maps') {
    return array('version' => 1);
  }
}

/** 
 * Implementation of hook_default_jvectormap_map().
 */
function jvectormap_default_jvectormap_map() {
  $export = array();
  $map = new stdClass;
  $map->api_version = 1;
  $map->machine_name = 'my_default_map';
  $map->description = 'Default Map';
  $map->map_area = MAP_WORLD;
  $map->map_area_custom = '';
  $map->height = '300';
  $map->width = '300';
  $map->background_color = '#505050';
  $map->foreground_color = '#DDDDDD';
  $map->hover_color = '#222222';
  $export['my_default_map'] = $map;
  return $export;
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function jvectormap_ctools_plugin_directory($module, $type) {
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implementation of hook_block_info()
 */
function jvectormap_block_info() {
  $blocks = array();
  // Expose blocks for every map, keyed to the machine_name column
  $result = db_query("SELECT machine_name, description FROM {jvectormap}");
  foreach ($result as $record) {
    $blocks[$record->machine_name] = array(
      'info' => 'jVectorMap: ' . $record->description,
    );
  }
  return $blocks;
}

/**
 * Implementation of hook_block_view()
 */
function jvectormap_block_view($delta = '') {
  $block = array();
  // Find the details for this paricular map (via the unique machine_name column)
  $result = db_query("SELECT * FROM {jvectormap} WHERE machine_name = :delta", array(':delta' => $delta));
  foreach ($result as $record) {
    $block['content'] = theme('jvectormap_map', array('map' => $record));
  }
  return $block;
}

/**
 * Implementation of hook_theme()
 */
function jvectormap_theme() {
  return array(
    'jvectormap_map' => array(
      'template' => 'jvectormap-map',
      'variables' => array('map' => NULL),
    ),
  );
}

function template_preprocess_jvectormap_map(&$vars) {
  $map = $vars['map'];
  // use the machine_name to make a unique container ID
  $map->container = 'jvectormap-container-' . $map->machine_name;
  // add the resources (css and javascript) to display the map
  jvectormap_add_resources($map);
  // add some variables for use in the template file
  $vars['height'] = $map->height;
  $vars['width'] = $map->width;
  $vars['container'] = $map->container;
  // add a theme hook suggestion to allow for more targetted theming
  $vars['theme_hook_suggestions'][] = 'jvectormap_map__' . $map->machine_name;
}